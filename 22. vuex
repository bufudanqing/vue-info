vuex 
每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。
1.Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。

2.你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。

安装 Vuex 之后，让我们来创建一个 store。创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutation：

// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)

const state = {
  price_VersionListByBusinessldData: [], // 获取面积版本列表
  price_CurrentVersionState: '', // 当前版本的状态
  price_CurrentVersionText: '无', // 当前版本的状态描述
  price_StageData: [], // 面包屑 阶段数据
  price_ListData: {
    data: []
  }, // 价格管理列表数据
  price_save: [],
  price_createVersion: [], // 创建价格版本

};

const mutations = {

  [types.PRICE_VERSION_LIST_BY_BUSINESSLD](state, price_VersionListByBusinessldData){  //面积版本数据
    state.price_VersionListByBusinessldData = price_VersionListByBusinessldData;
    if (state.price_VersionListByBusinessldData && state.price_VersionListByBusinessldData.length > 0) {
      state.price_CurrentVersionState = state.price_VersionListByBusinessldData[0].versionId
      state.price_CurrentVersionText = state.price_VersionListByBusinessldData[0].statusName

    }
  },
  [types.PRICE_CURRENT_VERSION_STATE](state, price_CurrentVersionState){ // 当前版本
    state.price_CurrentVersionState = price_CurrentVersionState
  },
  

  [types.PRICE_SET_STAGE_DATA](state, price_StageData){  // 面包屑 阶段数据
    state.price_StageData = price_StageData;
  },
  [types.PRICE_LIST_DATA](state, price_ListData){  // 价格管理列表数据
  state.price_ListData = price_ListData;
},
  [types.PRICE_CREATE_VERSION](state, price_createVersion){  // 价格管理列表数据
    state.price_createVersion = price_createVersion;
  },


}

Vuex就是提供一个仓库，仓库里面放了很多对象。其中state就是数据源存放地，对应于与一般Vue对象里面的data（后面讲到的actions和mutations对应于methods）。
响应式存储：state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新。（这里“状态”=“数据”），也就是是说数据和视图是同步的。
====================
在 Vue 组件中获得 Vuex 状态


那么我们如何在 Vue 组件中展示状态呢？由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：

Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：

const app = new Vue({
  el: '#app',
  // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件
  store,
  components: { Counter },
  template: `
    <div class="app">
      <counter></counter>
    </div>
  `
})


通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。让我们更新下 Counter 的实现：

const Counter = {
  template: `<div>{{ count }}</div>`,
  computed: {
    count () {
      return this.$store.state.count
    }
  }
}

=======================================================

mapState 辅助函数

当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键：

=====================================================
对象展开运算符

mapState 函数返回的是一个对象。
computed: {
  localComputed () { /* ... */ },
  // 使用对象展开运算符将此对象混入到外部对象中
  ...mapState({
    // ...
  })
}

==============================
mapGetters 辅助函数

mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：
如果你想将一个 getter 属性另取一个名字，使用对象形式：
mapGetters({
  // 映射 `this.doneCount` 为 `store.getters.doneTodosCount`
  doneCount: 'doneTodosCount'
})


==========================================

Vuex基本概念

state
状态的容器
getters
状态的获取函数
mutations
修改状态的事件回调函数
actions
分发修改状态的事件


const store = new Vuex.Store({
  //state
  state: {
    count: 0
  },
  //mutations
  mutations: {
    INIT (state, data) {
      state.count = data.count
    },
    INCREASE (state) {
      state.count++
    },
    DECREASE (state) {
      state.count--
    }
  },
  //getters
  getters: {
    getCount (state) {
      return state.count
    }
  },
  //actions
  actions: {
    init(context){
      context.commit('INIT', {
        count: 10
      })
    },
    inc(context){
      context.commit('INCREASE')
    },
    dec(context){
      context.commit('DECREASE')
    }
  }
})









